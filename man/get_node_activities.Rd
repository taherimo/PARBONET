\name{get_node_activities}
\alias{get_node_activities}
\title{
Calculation of activity rate for each node
}
\description{
Calculates fraction of active states at each time step for each node among a number of repeats.
}
\usage{
get_node_activities(net,
                    method=c("SDDS","BNp","PEW"),
                    params,
                    steps,
                    repeats=1000,
                    initial_prob=NULL,
                    update_prob=NULL,
                    return_last_step=F,
                    asynchronous=T,)
}
\arguments{
  \item{net}{
  	A network structure of class \code{BooleanNetwork} or \code{SymbolicBooleanNetwork}. These networks can be read from files by \code{\link{loadNetwork}}, generated by \code{\link{generateRandomNKNetwork}}, or reconstructed by \code{\link{reconstructNetwork}}.
  }

  \item{method}{
  The parameterization method to be used. If "SDDS", then stochastic discrete dynamical system proposed by Murrugarra et al. will be used. If "BNp", then Boolean network with perturbation (BNp) which firstly suggested by Golinelli and Derrida and then by Shmulevich et al. and Trairatphisan et al. will be used. If "PEW", then Boolean network with probabilistic edge weights (PEW) proposed by Deritei et al. will be used. In each of these cases a different pattern for the \code{params} argument is expected.

}

\item{params} {
The parameter values depending to the value of the \code{method} argument. If \code{method="SDDS"} the \code{params} argument is expected to be a list of four vectors p00, p01, p10, and p11. If \code{method="BNp"} the \code{params} argument is expected to be vector of \code{n} probabilities. Finally, if \code{params="PEW"} the \code{params} argument is expected to be a a list of two vectors p_on and p_off.
}

\item{steps} {
The number of time steps which should be a non-negatve integer.
}

\item{repeats} {
The number of time repeats which should be a positive integer.
}


\item{initial_prob} {
The probability that each of the variables are ON (1) in the initial state. If it is set to \code{NULL} (default value) then 0.5 is used as the probability for all nodes which means using uniform probability over state space of the network.
}

\item{update_prob} {
Probability of updating each variable in each time step is the case of \code{asynchronous=TRUE}. If it is set to \code{NULL} (default value) then nodes are randomly updated based on uniform distribution. If \code{asynchronous=FALSE} this argument is ignored.
}

\item{return_last_step} {
If \code{TRUE} only the node activity rates for the last time step is returned otherwise whole activity rate trajectory of the nodes are returned.
}

\item{asynchronous} {
If \code{TRUE} the asynchronous updaten scheme is used, otherwise the synchronous update scheme is used. If asynchronous update is used then one can determine update probabuilities using the \code{update_prob} argument.
}

}

\details{

}

\references{
Murrugarra, D., Veliz-Cuba, A., Aguilar, B., Arat, S., & Laubenbacher, R. (2012). Modeling stochasticity and variability in gene regulatory networks. "EURASIP Journal on Bioinformatics and Systems Biology", 2012, 1-11. [DOI:10.1186/1687-4153-2012-5](https://doi.org/10.1186/1687-4153-2012-5)

Deritei, D., Kunšič, N., & Csermely, P. (2022). Probabilistic edge weights fine-tune Boolean network dynamics. "PLoS Computational Biology", 18(10), e1010536. [DOI:10.1371/journal.pcbi.1010536](https://doi.org/10.1371/journal.pcbi.1010536)

Golinelli, O., & Derrida, B. (1989). Barrier heights in the Kauffman model. "Journal De Physique", 50(13), 1587-1601. [DOI:10.1051/jphys:0198900500130158700](https://doi.org/10.1051/jphys:0198900500130158700)

Shmulevich, I., Dougherty, E. R., & Zhang, W. (2002). Gene perturbation and intervention in probabilistic Boolean networks. "Bioinformatics", 18(10), 1319-1331. [DOI:10.1093/bioinformatics/18.10.1319](https://doi.org/10.1093/bioinformatics/18.10.1319)

Trairatphisan, P., Mizera, A., Pang, J., Tantar, A. A., Schneider, J., & Sauter, T. (2013). Recent development and biomedical applications of probabilistic Boolean networks. "Cell communication and signaling", 11, 1-25. [DOI:10.1186/1478-811X-11-46](https://doi.org/10.1186/1478-811X-11-46)

}

\examples{

# load the example network
data(lac_operon_net)

# SDDS Method

# define the parameter for the SDDS method
params <- list(p00=rep(0.95, length(lac_operon_net$genes)),
               p01=rep(0.95, length(lac_operon_net$genes)),
               p10=rep(0.95, length(lac_operon_net$genes)),
               p11=rep(0.95, length(lac_operon_net$genes)))

# get node activities after simulation using the SDDS method and asynchronous update
traj <- get_node_activities(lac_operon_net, method="SDDS", params = params, steps = 100, repeats = 10000)

# plot node activities

layout(matrix(c(1,2),nrow=1), width=c(4,1))

par(mar=c(5,4,4,0)) #No margin on the right side

matplot(1:nrow(traj), traj*100, type = "l", frame = T, lwd = 2, lty = 1, xlab="Time step", ylab="Node activity (\%)")

par(mar=c(5,0,4,2)) #No margin on the left side

plot(c(0,1),type="n", axes=F, xlab="", ylab="Node activity (\%)")

legend("center", colnames(traj),col=seq_len(length(lac_operon_net$genes)),cex=0.5,fill=seq_len(length(lac_operon_net$genes)))

# BNp Method

# define the parameters for the BNp method
params <- rep(0.05, length(lac_operon_net$genes))

# get node activities after simulation using the BNp method and asynchronous update
traj <- get_node_activities(lac_operon_net, method = "BNp", params = params, steps=50, repeats = 5000)

# plot node activities

layout(matrix(c(1,2),nrow=1), width=c(4,1))

par(mar=c(5,4,4,0)) #No margin on the right side

matplot(1:nrow(traj), traj*100, type = "l", frame = T, lwd = 2, lty = 1, xlab="Time step", ylab="Node activity (%)")

par(mar=c(5,0,4,2)) #No margin on the left side

plot(c(0,1),type="n", axes=F, xlab="", ylab="Node activity (\%)")

legend("center", colnames(traj),col=seq_len(length(lac_operon_net$genes)),cex=0.5,fill=seq_len(length(lac_operon_net$genes)))

# PEW Method

# extract edges from the network
edges <- get_edges(lac_operon_net)

# define the parameters for the PEW method
p_on <- runif(nrow(edges))
p_off <- runif(nrow(edges))
params <- list(p_on=p_on, p_off=p_off)

# get node activities after simulation using the PEW method and asynchronous update
traj <- get_node_activities(lac_operon_net, method="PEW", params = params, asynchronous = T, steps = 100, repeats = 10000)

# plot node activities

layout(matrix(c(1,2),nrow=1), width=c(4,1))

par(mar=c(5,4,4,0)) #No margin on the right side

matplot(1:nrow(traj), traj*100, type = "l", frame = T, lwd = 2, lty = 1, xlab="Time step", ylab="Node activity (%)")

par(mar=c(5,0,4,2)) #No margin on the left side

plot(c(0,1),type="n", axes=F, xlab="", ylab="Node activity (\%)")

legend("center", colnames(traj),col=seq_len(length(lac_operon_net$genes)),cex=0.5,fill=seq_len(length(lac_operon_net$genes)))

}
